crail_store.h

option 1: return unique_ptr<CrailNode> for create/lookup
- requires application to cast unique_ptr<CrailNode> to unique_ptr<CrailFile/CrailDirectory>
- casting requires releasing the unique_ptr, casting the raw pointer, and wrapping a new unique_ptr around
- that type of casting cannot be offered as a method (e.g., asFile()) on top of the dynamic type of node (no access to unique_ptr)
- in addition, we don't need unique_ptr as we are not overrriding methods of CrailNode in CrailFile/CrailDirectory


option 2: return by value, e.g., "CrailNode create()" and provide efficient method to move node to a file (move constructor in CrailFile)
- requires applications to explicitly call the move constructor, 
- instead, what we want is a method asFile() on CrailNode that moves the object and returns a CrailFile (or CrailDirectory)
- that cannot be done as requires CrailNode to know CrailFile (circular dependency)

option 3: template function, e.g., template <class T> T create()
- requires applications to pass type as template parameter
- downside: blows up crail_store.h

